#!/usr/bin/env bash
set -eEuo pipefail

# Track number of successful tests and running time
tests=0
start_time=$SECONDS
TMP1=$(mktemp)
TMP2=$(mktemp)
current_desc=""

err() {
    echo "FAIL: $current_desc (line $1): $BASH_COMMAND" >&2
    exit 1
}
trap 'err $LINENO' ERR

check_equal() {
    grub-editenv "$TMP1" list >"$TMP1.list"
    ./grubenv "$TMP2" list >"$TMP2.list"
    diff -u "$TMP1.list" "$TMP2.list"
}

run() {
    current_desc="$1"
    shift
    "$@"
    tests=$((tests + 1))
    echo "ok - $current_desc"
}

test_version() {
    ./grubenv -V | grep -qx '1.0.0'
}

test_install() {
    DEST=$(mktemp -d)
    make install DESTDIR="$DEST"
    [ -x "$DEST/usr/local/bin/grubenv" ]
}

test_create_new_files() {
    ./grubenv "$TMP2" create
    grub-editenv "$TMP1" create
    check_equal
}

test_set_multiple() {
    ./grubenv "$TMP2" set a=1 b=2 c=3
    grub-editenv "$TMP1" set a=1 b=2 c=3
    check_equal
}

test_set_additional() {
    grub-editenv "$TMP1" set d=4
    ./grubenv "$TMP2" set d=4
    check_equal
}

test_get_and_list() {
    ./grubenv "$TMP2" get a | grep -qx '1'
    ./grubenv "$TMP2" list | grep -q '^c=3$'
}

test_unset_multiple() {
    ./grubenv "$TMP2" unset a b
    grub-editenv "$TMP1" unset a b
    check_equal
}

test_clear() {
    ./grubenv "$TMP2" clear
    for var in c d; do grub-editenv "$TMP1" unset "$var"; done
    check_equal
}

test_set_when_missing() {
    rm "$TMP1" "$TMP2"
    ./grubenv "$TMP2" set alpha=beta gamma=delta
    grub-editenv "$TMP1" set alpha=beta gamma=delta
    check_equal
}

test_list_when_missing() {
    rm "$TMP1" "$TMP2"
    out1=$(grub-editenv "$TMP1" list)
    out2=$(./grubenv "$TMP2" list)
    [ -z "$out1" ] && [ -z "$out2" ]
    check_equal
}

test_unset_when_missing() {
    rm "$TMP1" "$TMP2"
    ./grubenv "$TMP2" unset alpha
    grub-editenv "$TMP1" unset alpha
    check_equal
}

test_ignore_comments() {
    rm "$TMP1" "$TMP2"
    cat >"$TMP1" <<'EOF'
# GRUB Environment Block
# comment line
# WARNING: Do not edit this file by tools other than grub-editenv!!!
foo=bar
EOF
    perl -0pi -e '$l=length($_); $_ .= "#" x (1024-$l)' "$TMP1"
    cp "$TMP1" "$TMP2"
    check_equal
}

test_read_small() {
    rm "$TMP1" "$TMP2"
    cat >"$TMP1" <<'EOF'
# GRUB Environment Block
foo=bar
EOF
    cp "$TMP1" "$TMP2"
    check_equal
}

test_read_large() {
    rm "$TMP1" "$TMP2"
    cat >"$TMP1" <<'EOF'
# GRUB Environment Block
# WARNING: Do not edit this file by tools other than grub-editenv!!!
foo=bar
EOF
    perl -0pi -e '$l=length($_); $_ .= "#" x (2048-$l)' "$TMP1"
    cp "$TMP1" "$TMP2"
    check_equal
}

test_get_missing_fails() {
    if ./grubenv "$TMP2" get missing >/dev/null 2>&1; then
        echo "get missing should fail" >&2
        return 1
    fi
}

run "verify version output" test_version
run "verify install target" test_install
run "create new env files" test_create_new_files
run "set multiple variables" test_set_multiple
run "set additional variable using opposite tools" test_set_additional
run "get and list" test_get_and_list
run "unset multiple variables" test_unset_multiple
run "clear using our tool" test_clear
run "set when file missing should create" test_set_when_missing
run "list when file missing should create and output empty" test_list_when_missing
run "unset when file missing should create" test_unset_when_missing
run "ensure comment lines are ignored" test_ignore_comments
run "read file smaller than 1024 bytes" test_read_small
run "read file larger than 1024 bytes" test_read_large
run "get missing variable must fail" test_get_missing_fails

rm "$TMP1" "$TMP2" "$TMP1.list" "$TMP2.list"
duration=$((SECONDS - start_time))
echo "All $tests tests passed in ${duration}s"
